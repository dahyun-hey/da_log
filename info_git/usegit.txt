git 사용법을 알아봅시다.

git에 대한 기본적인 명령어와 흐름을 알아보자.


1. 로컬 저장소 만들기
- 파일들을 버전 관리할 장소(폴더)를 정한다.

- 그 안에서 'git init'이라고 명령어를 친다.

- 이상한 폴더, 파일들이 만들어지는데 git을 쓰기 위한 준비, 새로운 저장소

  (repository)가 만들어진 것이다.



2. 원격 저장소 불러오기
- github에서 원격 저장소를 만들었다면 그것을 로컬과 연결시켜야 한다.

- 'git clone 사용자명@호스트:/원격/저장소/경로'라고 치면 된다.

- 사용자명 blabla..에 대해서는 github에서 원격 저장소에 들어가서

  clone or download라는 버튼을 누르면 원격저장소의 주소가 나오니

  그것을 쳐주면 된다!



3. 작업한 내용 업로드하기
- 작업을 완료했다면 git과 원격 저장소에 반영해야 한다.

- 'git add 파일 이름' 혹은 'git add *'로 인덱스(staged state)에 추가시킨다.

- 이것은 일단 추가 대기 상태에 등록해놓은 것이고 실제로 추가시키려면

  'git commit -m "이번 확정본에 대한 설명"'으로 커밋!한다

- 원격 저장소에 저장할 때는 'git push origin 가지이름'으로 푸쉬!해준다

* 그 전에 원격 저장소와 로컬 저장소의 폴더 구성이 다르다면, 즉 갱신 

  상태가 다르다면 먼저 pull, 그러니까 둘의 상태를 같게 해줘야 한다.

- 'git pull'로 하면 된다!



* error: failed to push some refs to 'https://github.com/pj6563/Online-Glasses.git'

hint: Updates were rejected because the tip of your current branch is behind

hint: its remote counterpart. Integrate the remote changes (e.g.

hint: 'git pull ...') before pushing again.

hint: See the 'Note about fast-forwards' in 'git push --help' for details.


혹시 push할 때  다음과 같은 오류가 났다면 아마 위에서 말한 원격 저장소와 로컬 저장소의 상태가 달라서 나는 오류일 것이다.
그러니 pull을 먼저 해주어 둘의 상태를 같게 한 다음 push를 해준다


출처: https://dh-dh.tistory.com/47 [자비스]


<git 기본 명령어 정리>
GIT BASH

pwd 
- 경로 찾기

mkdir
- 새로 만들기

ls -a
- 숨김파일까지 표시

git config --list
- git 설정 표시
-core.autocrlf=true : 

CLI (command line interface)

git init
- git 저장소로 설정. 저장소로 만들고자 하는 폴더로 이동

git status
- untracked and tracked 상태 확인

git add .
- tracked 상태로 올림

git rm --cached 파일명
- tracked 상태에서 untracked 상태로 변경

*Mac에는 기본 내장되어 있는 시스템

GitHub - git을 저장하는 클라우드 저장소 (가장 많이 쓰임)

**Git 명령어**

1.git status - 현재 git의 상태를 보여줌.

2.git log - 현재 저장된 형상들의 로그기록을 보여줌

3.git reset - 과거로 돌아가는 방범

3-1.과감한 방법 - reset 과거로 돌아감과 동시에 그 이후의 형상들은 지워짐

git reset  돌아갈 시점 —hard

3-2.신중한 방법 - revert (취소한 시점이 새로운 캡슐로 생성되어짐)

git revert 취소할 시점

    *시점은 git log의 일련번호 앞 6자리를 의미

4.Branch

4-1.새 Branch 생성하기 (자신만의 작업을 수행해보고 싶을 때)

git branch '생성할 branch 이름'

    *각각의 branch는 바로 이전의 branch 파일을 모두 끌고옴.

4-2.다른 branch로 이동하기

git checkout '이동할 branch 이름'

git checkout -d '이동할 branch 이름' 생성 후 바로 이동이 가능

git checkout -b '생성할 로컬 branch명' origin/master '원격 branch명'

4-3.branch 병합하기 - 다른 branch의 작업이 괜찮을 경우 master와 결합하기

git merge 'master에 병합할 branch 이름'

4-4.branch 삭제 - branch를 다 사용해서 더 이상 필요하지 않은 경우

git branch -d '삭제할 branch 이름'

※각기 다른 branch에서 같은 파일을 수정한 후 병합할 경우(충돌 발생)

아래 사진처럼 충돌이 발생하여 병합이 이루어지지 않는다.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e7ff5db9-f425-4aab-884c-5709da472ab9/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e7ff5db9-f425-4aab-884c-5709da472ab9/Untitled.png)

이러한 경우에는 둘 중 한 쪽의 수정 내용을 선택해서 git add -a, git commit까지만 실행해준다.

5. git rebase 'branch 이름' - 다른 branch에서 작업한 내용 가져오기

각 branch의 작업내용을 모두 병렬적으로 정렬하는 방법 (merge와는 다른 방식)

6.git remote - 원격 저장소 확인 

7.gitignore - 하나의 임시 저장소로 여기에 올리고 싶지 않은 파일명을 적어두면 업로드하지 않음.

*생성법 : touch .gitignore (*.log ⇒ 확장자가 log인 경우는 모두 ignore 처리) 

8.git fetch - 원격(remote) 저장소의 내용을 로컬 저장소에 불러오는 것(업데이트)

*readme - MarkDown의 역할을 하는 파일 (확장자-.md)

9.git pull - 원격 저장소의 내용을 로컬 저장소에 병합하는 것

*pull과 fetch 차이 - 병합의 유무 차이

*fetch의 경우는 각 저장소의 차이를 확인하고 직접 병합해야 함

※Git to Remote Repository 명령어 요약 시각화※

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bbe45bb9-7a05-420b-90d7-98b94e091b73/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bbe45bb9-7a05-420b-90d7-98b94e091b73/Untitled.png)

10.Git Clone - 다른 환경에서 같은 원격 저장소 환경을 사용할 때 사용